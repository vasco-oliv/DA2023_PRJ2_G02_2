#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <limits>
#include <queue>
#include "Controller.h"

void Controller::clearScreen() {
    #ifdef _WIN32
        std::system("cls");
    #else
        // Assume POSIX
            std::system("clear");
    #endif
}

void Controller::dataReset() {
    clearScreen();
    std::cout << "Clearing data...\n";
    vertices.clear();
    graph.clear();
    graph = Graph();
}

void Controller::readRealWorldGraph(const std::string& nodes, const std::string& edges) {
    std::ifstream ifsN(nodes);

    if(!ifsN.is_open()){
        std::cout << "ERROR: File not found\n";
        exit(1);
    }

    std::string line;
    int id;
    double lat,lon;

    std::getline(ifsN, line);

    while(std::getline(ifsN, line)){
        std::istringstream iss(line);
        iss >> id;
        iss.ignore(1);
        iss >> lon;
        iss.ignore(1);
        iss >> lat;

        if(vertices.find(id)==vertices.end()){
            auto v = new Vertex(id,lat,lon);
            vertices.insert(std::make_pair(id,v));
            graph.addVertex(v);
        }

    }
    ifsN.close();

    std::ifstream ifsE(edges);
    if(!ifsE.is_open()){
        std::cout << "ERROR: File not found\n";
        exit(1);
    }

    std::getline(ifsE, line);

    int idOrig,idDest;
    double weight;

    while(std::getline(ifsE, line)){
        std::istringstream iss(line);
        iss >> idOrig;
        iss.ignore(1);
        iss >> idDest;
        iss.ignore(1);
        iss >> weight;

        if(vertices.find(idOrig)==vertices.end() || vertices.find(idDest)==vertices.end()){
            continue;
        }
        graph.addEdge(idOrig,idDest,weight);
    }
    graph.hasCoords = true;
}

void Controller::readToyGraph(const std::string& edges) {
    std::ifstream ifs(edges);

    if(!ifs.is_open()){
        std::cout << "ERROR: File not found\n";
        exit(1);
    }

    std::string line;
    getline(ifs, line);

    int idOrig, idDest;
    double weight;

    while(std::getline(ifs,line)){
        std::istringstream iss(line);
        iss >> idOrig;
        iss.ignore(1);
        iss >> idDest;
        iss.ignore(1);
        iss >> weight;

        if(vertices.find(idOrig) == vertices.end()){
            auto v = new Vertex(idOrig);
            vertices.insert(std::make_pair(idOrig, v));
            graph.addVertex(v);
        }
        if(vertices.find(idDest) == vertices.end()){
            auto v = new Vertex(idDest);
            vertices.insert(std::make_pair(idDest, v));
            graph.addVertex(v);
        }
        graph.addEdge(idOrig,idDest,weight);
    }
}

void Controller::readFullyConGraph(const std::string& edges) {
    std::ifstream ifs(edges);

    if(!ifs.is_open()){
        std::cout << "ERROR: File not found\n";
        exit(1);
    }

    std::string line;
    int idOrig, idDest;
    double weight;

    while(std::getline(ifs,line)){
        std::istringstream iss(line);
        iss >> idOrig;
        iss.ignore(1);
        iss >> idDest;
        iss.ignore(1);
        iss >> weight;

        if(vertices.find(idOrig)==vertices.end()){
            auto v = new Vertex(idOrig);
            vertices.insert(std::make_pair(idOrig,v));
            graph.addVertex(v);
        }
        if(vertices.find(idDest)==vertices.end()){
            auto v = new Vertex(idDest);
            vertices.insert(std::make_pair(idDest,v));
            graph.addVertex(v);
        }
        graph.addEdge(idOrig,idDest,weight);
    }
}

void Controller::run() {
    startMenu();
}

void Controller::startMenu() {
    clearScreen();

    std::cout << "\t**Start Menu**\n\n";
    std::cout << "Select a Network Graph:\n";
    std::cout << "1. Real World Graphs\n";
    std::cout << "2. Toy Graphs\n";
    std::cout << "3. Extra Fully Connected Graphs\n";
    std::cout << "4. Other Graph\n";
    std::cout << "0. Exit\n";
    std::cout << "Option: ";

    int option, option2;
    std::string aux;
    std::cin >> option;
    double distance = 0;
    std::vector<int> path={0,3285,3113,3434,479,2204,2596,2654,3006,1177,3376,3060,1073,1600,3241,3807,3456,2318,3334,798,3647,1265,435,4507,3392,501,1594,1677,1555,2548,4868,3786,1046,366,4465,2459,1282,4859,498,4742,1242,2186,1746,2892,2833,4171,852,1175,3770,525,413,100,1101,1243,673,297,3342,1910,2253,1132,762,1182,4776,3321,4063,2322,3040,1348,4961,2503,4731,1873,2707,3973,3977,3209,4494,1403,3919,3027,1665,1233,3215,3520,3369,3545,2834,2267,2636,2261,4240,85,2202,1414,2625,948,1111,4513,2220,1324,1035,4659,1831,474,351,4909,129,2499,1885,2640,927,355,293,1918,3351,951,4526,3897,3949,550,360,2020,1656,4418,3601,1778,454,1228,3633,3623,3232,1490,4815,49,3813,4901,4008,1459,1266,2535,227,315,4641,2872,4962,677,2772,4336,3655,879,3708,456,737,2765,1155,1695,4266,4280,3323,4987,1816,4185,815,658,630,2634,1151,2137,3457,2695,1639,2895,194,348,2980,2473,4790,4469,2744,2000,1245,3918,1640,2090,3618,1498,2578,3857,3829,848,399,4069,2470,4656,1434,4380,4926,2140,1671,303,3738,529,2335,2148,4956,609,4540,3419,2357,3726,945,3563,61,113,3568,854,3166,2545,1876,2108,814,1620,42,969,4925,714,4504,839,3064,1772,4681,403,2331,1797,4197,3566,77,3690,742,4010,2216,4299,950,4642,1143,1116,2437,3653,1352,422,4036,3828,2956,4553,1222,2611,153,3528,4762,2472,2143,2915,131,64,1788,1216,1096,4702,2861,2224,524,1223,83,325,1991,4205,2639,3929,1866,4355,162,768,710,1572,2943,4467,3762,2345,177,637,2282,892,1115,731,2240,3583,2155,1779,4040,2280,2398,4289,2951,4429,4436,265,4627,3794,655,1632,2574,3314,2291,3000,3521,1971,3148,259,1748,3570,397,2432,1052,748,107,241,4602,463,4445,4716,3811,4108,3555,1821,604,4315,2397,739,3921,1020,1423,4225,1118,1374,2330,3090,4514,4122,2773,1950,3541,1383,515,4721,4826,1809,2800,4503,3062,2858,1160,4431,82,4508,156,4493,2040,3054,2474,833,3229,2671,2975,2251,981,3945,266,978,1655,864,2815,4331,2426,1651,1409,3731,3679,827,678,3482,2380,2663,2346,2361,505,2211,4644,1914,4009,3216,2370,2560,1152,1754,4680,3641,139,2407,3125,2918,1987,565,717,482,4784,3691,1213,408,3383,204,1965,15,4168,94,2387,2889,687,1029,4274,959,613,1306,2177,3341,29,4343,1571,3356,4521,3870,4822,851,4337,2893,280,3963,692,4877,2463,4581,2466,3331,2005,4872,1486,3991,3359,4094,1535,2061,4172,2166,3400,3116,1663,1363,1570,467,88,786,2033,1805,423,566,2307,3615,735,2753,4232,3525,252,4323,125,30,70,3499,853,105,868,4245,1053,2395,2031,1610,3222,514,4368,971,1447,4940,1441,449,646,1857,1847,2367,4357,4476,3302,4371,1089,1598,380,2933,2923,1905,3451,986,17,3643,2794,374,2164,465,1387,556,4598,132,51,3347,480,533,334,3135,665,885,443,286,4690,4713,3108,1429,4304,3439,3011,4489,4744,914,1510,1650,875,4013,1727,4073,563,782,1344,4536,3107,1445,2457,701,4067,2709,3165,2914,68,1098,3489,3564,3310,817,1638,923,457,4075,1527,1815,3696,681,1428,4482,2022,2944,3605,2490,4382,1732,4470,4529,1467,20,4181,2969,2953,1059,2055,1176,1713,2414,3421,3412,984,531,3103,4234,4023,3023,2607,3894,3529,4360,952,2592,3902,1289,2844,3447,2842,1416,2294,3559,3751,1882,3877,4706,1642,2693,1992,2191,1171,771,4657,4377,499,602,708,4849,4814,2424,1211,801,2334,475,1863,141,1295,3933,4993,4976,933,2046,269,1850,3020,4149,2804,2309,1297,1568,897,4252,3606,1002,1317,3537,4873,4374,1272,3951,2703,2007,792,2516,1349,1032,3367,2651,1307,2573,1832,112,3823,3105,4726,757,4106,4603,4856,4432,3101,2095,4929,4084,4421,3546,1484,4919,1031,3816,4949,2520,1539,4307,1461,3935,504,86,1350,3535,1631,3041,3326,1320,2667,3389,318,2689,1323,876,2411,4083,4463,2074,994,4564,2853,1124,2089,1373,2454,4103,1725,3661,1259,1099,4751,276,2936,828,1025,521,917,2812,1150,4985,943,956,4369,270,4058,2810,2770,2674,420,865,3863,134,38,3976,4376,718,3534,584,2163,3039,3916,816,3410,4000,4757,3883,1329,4397,1131,993,1758,340,1187,4267,2852,4951,1550,2924,441,128,1564,4059,910,2519,91,3158,818,2652,1506,1518,1218,436,2384,1577,3381,489,3530,624,458,3144,3099,4339,634,2696,4608,4797,4019,2119,1493,2269,140,2587,4114,3997,526,3045,190,517,1966,4394,4931,421,1943,389,3380,3346,1858,2623,1515,225,1860,4028,3467,3320,1714,216,4750,2156,2029,4262,3089,4099,849,3531,1482,2666,4239,3506,1126,4152,4947,4037,3257,1902,358,862,932,4558,4963,2409,1652,1611,1633,3917,3645,4887,2015,2339,1517,1509,2604,649,1953,644,1311,2193,2023,800,4539,3189,856,3600,1250,3772,4794,99,901,4439,1683,1446,336,4170,4922,50,4625,1890,2412,2702,2521,2747,1421,197,25,1945,1113,3205,558,2541,1723,3700,3626,2131,3268,1418,3080,4231,1337,2836,2341,4230,3957,439,4911,1838,1686,2937,2170,2529,3005,4728,3349,1318,484,1641,4892,292,3220,4076,2296,2324,3163,4148,1063,3781,3665,2598,4095,4279,4228,913,3026,825,298,4283,2616,661,703,4881,417,1054,3150,2952,1512,469,871,1789,1828,4434,4781,723,4880,4546,4607,2111,147,1167,4294,1678,1305,3960,3716,3614,1036,1290,726,223,93,3782,2722,3291,3749,3972,2665,102,459,4996,3332,1172,126,1273,2042,1929,1004,301,2283,4674,28,3110,4689,1795,2809,513,2225,2236,3370,4365,2360,2016,3571,1381,1148,4653,3637,741,631,2219,918,2416,2435,247,1629,2761,4830,1712,72,3675,774,2961,4658,3416,3657,3083,3671,3411,2208,4703,965,1153,2445,4823,4265,4191,3978,797,4272,2580,2344,1270,1023,2265,3777,3732,3747,2246,3622,4506,1869,1244,4352,4419,342,3744,4545,4273,4515,3803,2874,2176,2478,12,1895,562,4027,846,564,2826,916,1304,4850,3900,3950,2957,1163,1514,2400,1164,3134,4671,4005,2959,1985,4444,35,2552,2377,3881,4124,761,1801,1856,745,209,185,1300,1757,2559,4366,4593,3097,1468,4020,18,4820,1062,2078,4710,1200,2077,1140,4501,1622,647,822,1669,56,4570,3940,1868,114,1989,2601,2736,183,1286,1110,1411,2100,98,1298,1219,4471,794,1785,915,1097,1726,4825,1061,4478,1269,4883,3156,289,3034,4468,47,1532,2135,3892,2865,793,4427,4375,2213,759,1751,1012,758,3496,552,2743,3901,4492,4032,3003,1519,3337,546,1994,2628,2373,2212,660,887,520,4111,2189,518,3269,3538,3236,2843,4573,4530,3076,3139,2460,3102,4137,958,2821,700,645,4031,2767,3213,2606,1408,4392,1141,3925,4052,1915,4944,1193,4155,2142,4483,4775,4400,1592,4647,4048,944,3705,3827,2160,4447,811,3766,124,3407,3899,39,3970,4886,1391,662,3217,3202,217,3025,3656,2912,3850,3013,3197,3778,1741,1081,4118,3629,686,990,3223,1700,1899,2613,530,2394,3801,3082,1826,2890,3915,433,2223,4325,2392,2221,3322,1186,824,55,4261,1720,2828,16,1103,924,3610,4900,1694,1975,4969,2531,2789,1944,4131,2065,3771,2694,44,237,2823,2032,536,3868,1851,936,2237,3431,4093,491,3403,2766,3677,3117,2715,1214,4594,4184,3327,4292,1907,4453,2972,3072,2721,274,832,4583,2863,1331,2877,2039,2644,149,891,3663,3572,788,4854,4768,1803,4808,1255,1960,1254,4643,744,2711,3032,1162,712,4718,1912,375,1575,534,2270,4720,2248,200,2908,3867,2838,4190,1835,2672,2960,2326,2735,560,4933,3479,3121,2198,2512,3569,1605,341,3926,1529,1941,4617,437,3713,766,2887,2113,1613,740,110,4542,1875,1050,1747,4412,2814,496,720,488,3502,989,1232,2276,2444,369,2281,1553,3109,3694,4033,4173,2808,653,2879,2306,3235,4209,4329,359,9,2676,2658,3261,2697,2264,2525,3420,571,138,2431,3547,2837,539,52,1088,1644,2332,4905,3825,1316,2158,2624,189,2017,4128,4105,1473,345,749,3112,4894,2139,1453,1879,4664,1225,1430,231,3846,1861,2351,2165,4712,2417,635,3260,4498,4624,1376,1979,4024,1313,4004,159,4853,2987,3966,2719,2901,3428,3449,3244,3058,3745,1382,4428,1312,1728,3549,4650,3301,2376,4220,3504,4590,394,3617,2764,4684,3480,4296,3390,3143,2488,1078,911,1566,3171,4855,1431,4990,116,3177,2664,2120,4785,3119,1896,4338,2997,3802,1615,3836,4561,4350,3632,963,1341,3374,2440,1071,3817,907,4891,4682,2945,164,4016,1534,715,2627,2513,2974,371,3133,4500,1530,1415,1581,4123,368,4579,2745,1667,4064,753,1898,4129,2461,3511,1471,365,396,4433,261,1813,2408,2641,2919,2920,2190,236,471,2372,535,4698,2301,3318,331,1734,1932,4809,4206,4119,462,3181,3305,3873,733,1284,702,1520,3183,3999,363,4316,3214,1296,3532,2187,4753,135,2257,4241,3871,4589,4144,3730,3016,4551,3436,1238,1191,1280,3763,1894,444,2906,2231,2012,3993,167,2635,2277,2811,1362,1931,3408,1327,4101,1190,1027,2898,1057,1125,4517,4974,4773,3406,2272,1368,222,4362,2965,1721,1018,4214,1165,4502,2105,1174,302,3585,1136,3932,3630,4585,4958,930,2434,120,2841,657,1485,450,4301,87,1198,4979,2756,4769,2738,3330,1497,2688,2680,4970,2274,3699,694,894,4242,3049,537,4711,1710,4246,4269,877,1487,1585,4693,680,3377,1397,636,1247,4722,725,4248,4410,2179,3044,4247,2255,1138,22,2381,2537,282,2706,1261,1258,1457,379,3903,1274,7,861,3017,2043,4610,3270,2563,1217,2238,4918,2593,2776,1454,3315,966,953,3753,119,268,2014,1022,831,3728,101,674,2760,598,1980,796,1168,1719,1829,248,2048,4865,4342,3724,4495,4408,4179,3275,494,10,510,639,1690,1370,2471,4387,3602,2966,2469,808,4592,4566,548,2522,3495,1635,1558,1938,244,975,169,4691,1359,1079,27,80,1045,1623,1666,4218,4264,1625,4459,4049,2798,2558,1880,3666,4845,1996,4356,2364,4646,4622,2802,1424,1231,1687,4959,1166,4828,4701,699,611,455,1033,2465,367,559,3010,3078,4605,4982,3477,1670,3053,1661,212,1982,3249,1406,2259,2717,3114,4637,2121,2447,2650,3937,3483,2475,2555,1995,656,3242,1206,4807,2782,215,96,294,4630,883,2605,3703,1221,826,1842,2299,724,1708,2073,1769,4672,4957,3415,1427,3068,4188,4295,928,3081,3576,1705,4038,3701,3287,2569,4991,1872,4677,3248,594,1846,4293,3384,4395,1904,2314,2350,4819,481,3885,4889,3556,3595,3353,4851,4156,2185,1790,4660,4200,2946,4869,925,4667,4697,430,2849,1013,1249,666,344,3967,1978,3638,3028,1112,3122,2907,1909,63,1648,2041,451,940,1458,246,4983,2824,3891,4992,615,407,2116,2233,3012,3515,1444,3984,2590,160,4401,979,2151,4673,1649,1128,2568,2725,1848,567,312,2653,3979,170,2072,2008,2806,3756,3095,208,1820,551,1584,1076,2126,896,188,1048,2382,2064,3994,2595,4640,2708,2769,2662,4165,919,4235,2312,3581,3211,3338,813,2070,2418,4765,4390,168,3458,3616,1087,1548,4442,4562,2726,2439,1335,4166,478,2396,3306,3317,3255,4842,3127,3091,1874,1976,1173,1093,4344,2390,3,284,349,2614,3527,285,3689,3004,3201,752,4311,3875,3182,2197,4612,4223,576,1355,4310,26,2258,414,688,3905,1412,1738,706,4327,2608,4474,2783,1016,507,2996,2383,4907,1185,4572,4915,3815,626,1908,255,1278,2011,3079,3088,1503,3043,416,243,429,4125,3308,2986,4422,995,3278,2746,373,4224,3758,1006,1236,3889,343,3590,2436,4652,1993,3191,4696,1537,2673,4511,1796,4317,1822,2648,1122,213,210,4994,1859,3702,3075,224,4833,3625,787,2207,2886,2562,837,43,4346,2222,3375,3453,4535,4989,3757,1933,2885,1425,4061,3073,3518,1293,1749,277,1870,4523,4966,3325,873,2572,3808,2684,3765,3253,999,2358,4839,2362,1207,543,3516,516,1887,3634,4204,171,616,840,1521,2027,146,1597,3792,3294,810,2122,2909,2504,2464,2649,2698,4973,2570,2403,2831,2752,1336,3750,57,4141,1246,3059,1511,547,3465,3874,1410,1364,579,3806,1277,306,2730,4836,3721,2713,2787,4290,3152,144,2796,3313,4740,3710,2527,789,2087,1065,4175,2385,4831,3002,4162,1158,75,2214,2762,1977,3437,4746,1056,3238,806,1793,841,1827,4277,2857,629,4384,2682,4202,3319,2199,3714,3409,2094,4788,4743,3247,2724,1360,4953,24,34,902,807,676,2157,1658,1750,3591,3096,2149,1659,1499,4284,1161,3484,4457,328,1787,1188,4096,4263,777,2797,599,69,3912,3821,858,2597,3650,2313,4714,736,4393,2181,4251,3277,4364,1578,4586,3759,4631,4816,4080,45,1385,1906,271,230,3805,1043,1609,574,747,1516,3646,3157,3522,3154,4496,419,1085,1682,2645,3344,4556,1768,2859,3129,3619,1657,4017,4732,2004,3362,2816,1263,2125,2336,3266,2228,1582,555,3256,3500,2998,1752,3468,2740,1178,382,2006,2803,2399,2327,3800,263,1291,2389,3280,1279,4303,3761,3599,4737,2584,3009,4817,1557,4324,3620,2167,1709,4448,3147,195,1396,4107,4748,1092,4941,1983,2484,803,3372,838,4936,2629,3707,2530,1688,3930,3879,4193,528,178,3607,4413,2916,1701,638,1067,1371,4786,3830,4972,4727,4186,4034,4893,1745,3704,199,2320,4902,219,3839,3379,3660,33,4424,4736,3909,3071,211,4451,4633,3565,76,3350,1808,3998,3773,145,1744,2178,1792,483,2994,3404,1007,3659,3896,229,3804,338,2249,2152,693,226,4207,4632,2415,4948,2438,4154,2172,1474,1105,3476,4565,2891,3824,935,4115,3422,165,404,2443,1893,232,1024,596,1855,1042,705,3046,791,3417,1547,1260,3488,3077,4576,2731,608,193,4309,4945,1212,3168,2297,4321,2990,2940,4950,3170,3604,4628,3316,3454,3175,4695,4522,203,234,2888,1028,3413,4161,974,2453,4150,4533,578,250,53,4932,2995,2876,2391,1417,2188,3752,4771,4864,1817,2173,3024,3018,201,1492,3106,4801,2534,1603,863,4286,1541,2340,2363,2308,2542,4243,2013,400,3722,3382,4056,2050,830,2619,1068,955,3387,187,2467,2631,2846,2517,612,1962,1576,2581,377,4373,376,1562,4430,3842,683,3055,1326,2626,1338,4278,130,889,1354,2875,669,2633,346,3627,3505,522,4460,4053,2962,4758,2037,3831,3580,1595,1149,4068,1000,1380,3357,3878,3980,1209,4182,684,4423,4426,2539,4827,2405,1730,2646,2848,381,3264,2991,934,4688,3579,2428,985,3859,401,392,3443,3743,3676,4639,3405,682,67,2941,619,3501,977,2374,2110,4254,939,1267,2379,347,1227,2737,2273,3698,651,2757,3895,2732,1204,60,812,4752,2692,1525,4767,4446,4719,572,1716,4416,4960,3971,2063,1195,3186,3965,1878,4717,2288,2009,2508,1798,319,313,695,310,4870,2704,3033,4747,4297,4623,4910,1333,3608,2913,2217,1804,1761,670,3194,3664,1794,3682,4481,575,3251,46,991,1715,3557,1843,756,333,1040,605,8,1248,4616,652,654,4488,2591,4227,3914,90,384,2058,1679,4480,4537,3126,2576,180,1205,3814,108,1500,4138,2455,4255,3776,4729,4777,2450,3962,4306,2295,2026,1853,2427,2620,3865,3442,1672,3715,4089,1015,1208,3737,4051,4588,262,324,2921,1833,942,1351,4250,1203,1060,4045,2670,4057,1616,111,823,3954,2903,3345,983,2655,4160,3164,3939,4772,4908,591,1094,3394,4984,4971,2278,3312,1014,3161,2710,1849,1075,372,438,2057,1824,4840,2588,3628,41,1367,3187,4821,4912,1108,66,2092,445,2993,1066,1074,192,790,1634,1696,1127,2093,78,3038,447,641,2930,1159,3553,1660,2206,290,2896,3741,431,4917,3941,1802,1,4473,2302,4516,3373,2801,3508,3784,3536,3029,4709,2685,2106,1001,2550,3258,1435,601,1322,4930,3065,3290,4924,4613,3219,1475,821,1830,1226,2870,109,997,4676,4634,4544,2021,3292,1590,3577,3267,1196,278,1481,332,218,4770,1480,2775,1814,3225,783,890,3582,1693,196,2566,256,1147,1342,2144,643,386,4079,2647,4879,1064,2462,2433,542,106,2486,2098,3812,1005,40,4686,3911,2544,54,3514,2869,1702,899,3560,1626,3425,628,4662,3174,2942,1926,2970,4567,4335,4353,4215,3414,4670,4802,3185,941,2097,2018,3471,3958,2884,3768,2481,1114,1215,4098,2727,2618,938,4946,722,2356,2839,1673,3948,4159,155,3552,4486,453,3204,4330,4600,2659,778,142,2084,1502,3509,538,59,4738,4921,3684,4328,1760,1684,2905,1010,3551,2035,4943,4997,4300,2393,335,3430,4417,3120,1201,1770,866,2271,3662,2610,527,704,3697,1579,395,2317,1086,2733,2056,1251,1339,2524,4116,3230,900,2600,2315,415,2115,1559,4126,1394,2523,1379,470,2818,4177,1154,2124,3441,1047,2458,1574,3820,4178,2366,1782,2192,3132,2365,1739,961,3639,2847,2788,3748,1369,4187,2501,2533,1736,3810,3352,410,2088,1144,3299,3826,4466,4452,1563,2195,1951,1699,1643,1877,4221,3365,4606,4112,992,4678,1786,2244,2643,4818,370,668,1531,3558,1439,2817,487,4638,2205,4595,2102,4534,3688,1443,4760,2860,1697,4305,2705,2880,1034,2540,176,3284,512,4888,4791,3996,4229,3588,946,6,3880,4980,1920,1123,614,1183,2279,2565,829,4547,2054,804,3611,663,882,3203,3118,4916,2729,500,2201,2498,3597,2321,3432,4415,2010,4217,2758,1117,4733,1440,4062,3491,1925,172,1961,3145,2441,4367,3418,3030,3886,3642,2862,428,3243,3311,2413,1554,2232,1840,4146,650,3775,2712,2579,664,4857,4383,393,898,1220,3192,1179,1021,4604,3851,1488,3819,3959,4538,2825,3188,2025,908,4954,1257,2067,3069,492,640,2988,4198,754,3596,4824,4621,1489,1549,2003,2958,2245,174,2714,4233,937,1624,4741,964,1593,4341,3974,4626,1812,4759,3237,2316,1591,3239,4550,2805,295,4937,4532,2378,4913,2557,3864,2422,4645,4003,115,305,1852,497,4313,1404,1936,4766,4804,820,2209,3281,888,2538,4268,314,2420,3498,4882,2494,1645,4955,2337,2894,4405,354,1452,1189,1676,2754,308,249,2551,696,253,1561,158,3904,4528,3961,3574,3339,922,976,2929,1668,1972,580,1528,583,2493,4999,2421,4531,4723,4761,4587,3995,4611,3989,1137,3809,3799,2047,1630,1120,2262,620,4735,1288,3138,2028,633,1420,2718,4812,3031,1308,2690,4281,426,2967,3876,2487,3259,4213,4253,4745,2347,1090,3789,2266,322,184,4074,3834,4285,4087,175,4968,3104,4846,1707,2024,4441,2423,3371,503,2583,2948,2468,4635,2483,1922,3283,3640,3603,2840,4871,3798,3797,4863,2068,3575,1072,2881,152,3446,4749,904,257,3543,519,2429,2577,4134,3180,391,1691,2138,3844,2971,3361,1026,4805,1841,1008,1142,198,2287,895,3463,2128,251,207,2489,1698,781,32,2900,590,721,2793,632,606,4026,2159,2045,1328,4568,300,2285,1241,3725,1607,2289,4260,1759,4046,4582,2235,2104,1422,3240,730,1472,1450,74,1928,819,2354,330,4110,903,31,847,3673,4399,1253,884,387,2981,1767,2866,1646,378,182,988,3913,1997,3271,1543,4754,2252,1737,1560,4437,4398,2034,127,4861,1565,843,4169,3669,2856,291,19,1717,2554,3764,11,3295,1731,4852,1599,1892,4829,385,1587,4584,3231,3613,3153,1095,1959,3848,1169,2686,836,4876,1618,228,3519,1998,2096,4086,150,2612,36,2477,1030,2984,2482,2526,1567,1398,283,2938,1321,1345,3469,4120,1807,4596,3328,3050,1119,4577,4878,2085,2723,872,3975,3333,485,3927,767,1891,4527,1513,4724,4012,709,3048,1465,317,1916,4704,607,4518,2480,769,3391,4669,2786,1776,14,3035,3388,337,3938,4189,1921,880,3523,1390,3651,4130,2638,763,1957,2079,1477,2083,2742,2657,2827,3128,4858,4764,2491,2820,1491,2323,1037,143,954,3462,1476,1867,4,3262,2404,4192,3943,1806,1145,2586,466,2080,1542,4559,2215,122,1469,4409,4629,3427,1082,3452,3866,2375,573,3872,260,1523,3727,3052,4988,2511,4906,4708,909,1083,65,3094,3964,4725,1384,869,729,434,4649,2505,581,3636,1924,3478,4705,221,732,1706,3167,780,1601,4461,2899,2739,3584,4614,3554,3459,1041,1462,148,3513,1934,593,3621,388,3672,1913,4575,1388,2325,3426,4381,2785,2183,4800,750,3252,4563,4002,4425,600,4685,4694,1234,2086,1230,4385,2832,4391,987,3910,957,3849,1968,3692,4132,1070,1276,3944,2749,4734,2642,2154,4813,1399,3051,3286,859,844,2851,1091,3293,3123,3492,3042,4455,3481,2497,4795,1401,1596,4520,1353,4386,3795,356,3833,568,1984,2637,2,508,1419,1197,4699,4332,1466,4102,1884,3124,595,4792,3922,2679,3796,4082,4060,1901,1637,1107,95,1271,3793,2621,569,4509,4934,3837,272,857,727,3947,3680,1438,4655,4201,3779,4113,4654,4216,3882,3343,3612,3709,3184,2977,1184,3890,3644,245,4793,3250,1170,3992,1156,912,1536,4862,3178,2668,3265,3015,4180,3544,2038,1871,4127,4133,2002,2660,4844,3472,4236,3695,4779,398,4203,1358,411,502,2955,4666,3440,4349,133,4403,48,1999,4088,1386,3173,2118,4014,202,4035,3395,1224,549,1773,307,3246,3355,287,3567,667,473,2864,2528,921,2792,117,3884,279,1586,151,1343,1774,1930,4378,1627,1964,4928,4692,3466,1366,776,4580,3366,3609,4147,1889,2247,1740,3838,3907,2304,2734,2310,2982,3146,4275,4345,4291,3282,697,3729,486,4363,2790,4778,1003,3760,425,2386,545,603,92,3780,2153,784,4890,1664,1556,1407,4505,4875,2355,617,2939,1505,3014,1080,2871,4153,4497,3245,779,4730,1038,698,3739,2883,4675,3718,2963,323,577,3429,4100,4835,4212,4665,3723,4334,589,1463,1470,2778,4832,3487,2001,3920,1378,4700,2136,4995,2060,3942,1389,4763,2123,1552,1619,1437,1825,2129,1275,3674,3720,3990,2514,3444,2602,2926,4021,3151,2904,1675,2728,2019,4151,3424,3681,3227,2928,1854,4903,281,2902,2973,3931,4030,4183,835,570,3309,2873,472,4661,3470,1967,3176,4018,3862,4276,4319,3179,4288,2518,3141,3946,3592,4226,3074,2250,1540,214,541,2780,3533,738,2691,461,2263,4964,2371,1704,4050,2599,4618,557,2130,1455,1262,878,4222,3754,4464,728,3348,4372,1988,2495,452,3092,2260,4440,2230,1883,3297,2082,2543,2515,4456,3835,4389,2553,2425,329,3774,2532,627,3494,764,2507,1432,4811,799,205,288,2950,4257,1617,3399,166,3658,4443,3735,1689,3445,2589,2661,4271,4782,3224,3843,2678,1340,3363,755,1299,206,2932,2161,2791,770,1886,1602,2999,1055,2922,3928,2452,4490,432,1017,1526,2632,3474,1722,2677,2229,3172,3822,4897,2964,540,3423,4176,4479,4837,4609,4348,4121,2561,4683,4986,4525,2759,3354,1837,4687,1834,4135,1923,406,2669,311,4679,2768,4485,62,3324,3852,3841,362,2359,690,1402,4896,1237,3853,3685,4097,3687,2496,4174,1301,4287,1479,296,1346,926,1325,1952,3678,4011,1256,73,1780,181,4007,3304,2983,2979,1210,1104,161,2107,1504,4578,1888,2044,3667,3475,2333,4739,1405,4211,623,4219,1939,2935,3742,2069,4258,4164,361,3988,691,3274,3507,448,3854,980,3767,4755,2681,4571,1958,275,685,4487,4388,3435,1551,3540,2615,1448,3218,2305,2150,4885,1294,2036,4270,3001,4619,4554,1743,3968,58,3433,4636,1948,1811,316,1181,4351,2968,3199,442,4848,2850,3858,1981,1544,3983,2683,3855,3008,3586,3460,4975,1507,1775,3734,3624,3198,1121,4462,3986,4475,2500,2174,3686,1309,3785,1524,713,3340,1756,1133,3263,2329,1784,1285,1392,1501,2103,121,137,154,1377,2298,1130,79,532,3589,3066,2799,672,1252,3149,3924,625,1937,1100,4519,4308,1753,3746,2700,511,2476,3100,1334,1426,1703,2868,1129,4078,4070,1332,254,1762,1781,1777,4860,3683,4998,350,4322,89,2133,2446,3155,2927,3276,3953,4935,2675,850,1733,3140,2506,4109,4071,4499,3111,597,4899,1508,3668,4358,321,1654,3524,1240,4194,3539,1606,2218,587,4347,1947,3037,353,4196,1302,464,4927,3296,2175,3936,4143,2567,1456,1771,970,1589,3450,1347,3208,1963,3368,4549,3067,2127,37,1662,4340,3648,2985,2401,1956,4524,3587,1361,960,4092,2910,3393,1235,84,4435,1990,3635,1372,4838,3200,1157,136,648,4938,3548,4326,2456,4599,3740,2934,1588,5,2755,867,2687,4541,1681,3402,4407,554,3288,743,3070,273,2184,1268,3934,2751,4774,1011,1451,2813,4449,2882,4139,3598,3336,3085,2099,352,2402,716,3196,3706,4001,1281,299,689,2781,4458,81,3360,2741,2536,1942,239,3818,2196,3234,3019,2582,3832,4552,2617,707,4799,2239,3791,267,2492,4648,2352,4438,4015,3856,4874,1949,1764,1039,2349,4756,3300,3190,2855,809,2194,4312,4158,1935,4843,1897,947,3887,775,4043,304,2603,2878,2091,2748,1229,4491,3550,671,1545,773,4359,4029,3136,3485,258,1357,1283,2406,2227,163,3131,3649,1292,2510,2342,4543,2771,4834,929,23,3693,1799,3057,3717,2992,3047,4302,4256,3063,2845,1818,3790,2141,1199,1864,3652,2575,622,1483,4780,3736,3193,1621,495,1365,1970,1900,240,2303,592,2835,586,3861,1319,4354,2071,2200,4025,2241,2275,3987,327,870,2656,920,2485,71,1146,4041,2075,2292,4066,440,1755,402,4402,3985,3084,477,2284,3542,3329,968,3860,3397,2784,446,1636,3787,4783,3212,2609,390,2947,4006,412,4085,3226,4142,3398,1729,4314,4939,4091,2162,220,2169,4952,3159,1194,1395,4361,1614,2829,4396,2720,4615,4557,1865,2234,3273,2059,3593,3783,3130,4104,4898,1303,1180,4157,3036,3195,1019,2369,4454,2146,1442,3562,3233,2300,1724,235,4841,309,675,2311,4282,3969,3923,2699,1604,3503,424,3486,4477,1533,2917,1356,1823,4298,3303,2807,2180,3169,4333,4787,2622,2030,4484,2132,3307,2830,3022,2502,2114,2779,104,3221,1546,1375,3378,4597,4379,2978,4651,326,3461,1973,1135,1433,123,4867,881,2081,21,523,1580,3464,1009,998,1946,4055,191,1310,2049,2594,1058,4789,1069,4965,1836,2509,3087,3364,4942,1413,97,2430,3526,1927,3847,4208,4199,320,3438,3733,4411,2419,2777,1969,734,3056,3210,4167,1538,4884,2556,3981,3573,3510,3952,3401,476,1810,2168,4591,157,4117,2819,3512,3906,3061,1106,893,949,1839,3956,2066,711,2479,2052,982,1239,118,2268,1044,1819,1692,2410,4414,2546,3719,1685,2897,3385,4914,834,1783,1718,4977,1084,1766,4981,1400,4163,179,3396,1287,3228,931,1315,1917,2795,4054,1612,2549,1077,1608,2338,1955,795,4081,618,561,3206,3115,4077,2353,13,1496,2716,610,2701,2242,3473,1940,805,1192,4548,3335,2449,2254,2976,1986,1735,490,2822,1653,3654,2348,2442,2101,973,4244,3517,3358,1478,2147,1449,3455,2931,4620,233,2256,4370,383,659,4904,2293,1919,765,2290,1139,460,3160,4920,4044,427,4249,3869,1742,4574,1954,2319,3982,2182,4065,4978,3137,4555,4318,4259,4210,4237,1911,1881,1522,2854,1049,3955,1202,1903,4569,3298,4866,3631,1109,1051,2051,4022,4923,2911,1134,4238,409,3497,2925,3769,1314,4560,760,886,2989,2053,4810,4510,3254,364,1393,2134,4406,2547,186,2109,1569,3670,588,4420,642,4404,751,1330,842,2210,996,2451,506,2145,264,3007,4136,2585,785,4798,4195,3448,772,1800,4796,3898,2750,238,2954,2343,4707,3086,802,1791,1464,509,855,1102,3845,905,4668,3893,3493,2949,3711,4039,4090,967,1763,4512,3888,3021,2243,4320,2226,2076,3594,3578,2368,1674,3561,1647,3207,1974,4806,2763,2286,3279,4803,621,1436,585,468,2112,679,1680,2630,972,1845,746,2564,1495,3093,3386,2062,4042,4450,906,860,2571,2117,544,582,242,493,2867,3908,4072,2448,1711,4847,1573,1844,4145,405,962,719,4967,3755,3142,1583,1628,173,2203,3788,553,4715,1862,103,4601,339,1765,1264,2774,4140,874,3272,2171,1460,3840,1494,4047,3490,2388,845,418,4663,4472,3712,3162,3098,357,2328,4895,3289};
    switch (option) {
        case 1:
            clearScreen();
            std::cout << "\t**Start Menu**\n\n";
            std::cout << "Select a Real World Graph:\n";
            std::cout << "1. Graph1\n";
            std::cout << "2. Graph2\n";
            std::cout << "3. Graph3\n";
            std::cout << "0. Go Back\n";
            std::cout << "Option: ";
            std::cin >> option2;
            switch (option2) {
                case 1:
                    clearScreen();
                    std::cout << "\nLoading Data...\n";
                    readRealWorldGraph("../Project2Graphs/Real-World-Graphs/graph1/nodes.csv","../Project2Graphs/Real-World-Graphs/graph1/edges.csv");
                    mainMenu();
                    break;
                case 2:
                    clearScreen();
                    std::cout << "\nLoading Data...\n";
                    readRealWorldGraph("../Project2Graphs/Real-World-Graphs/graph2/nodes.csv","../Project2Graphs/Real-World-Graphs/graph2/edges.csv");
                    mainMenu();
                    break;
                case 3:
                    clearScreen();
                    std::cout << "\nLoading Data...\n";
                    readRealWorldGraph("../Project2Graphs/Real-World-Graphs/graph3/nodes.csv","../Project2Graphs/Real-World-Graphs/graph3/edges.csv");
                    mainMenu();
                    break;
                case 0:
                    startMenu();
                    break;
                default:
                    std::cout << "ERROR: Invalid option\n";
                    std::cout << "(Press any key to continue)";
                    std::cin >> aux;
                    startMenu();
                    break;
            }
            break;
        case 2:
            clearScreen();
            std::cout << "\t**Start Menu**\n\n";
            std::cout << "Select a Toy Graph:\n";
            std::cout << "1. Shipping\n";
            std::cout << "2. Stadiums\n";
            std::cout << "3. Tourism\n";
            std::cout << "0. Go Back\n";
            std::cout << "Option: ";
            std::cin >> option2;
            switch(option2){
                case 1:
                    clearScreen();
                    std::cout << "\nLoading Data...\n";
                    readToyGraph("../Project2Graphs/Toy-Graphs/shipping.csv");
                    mainMenu();
                    break;
                case 2:
                    clearScreen();
                    std::cout << "\nLoading Data...\n";
                    readToyGraph("../Project2Graphs/Toy-Graphs/stadiums.csv");
                    mainMenu();
                    break;
                case 3:
                    clearScreen();
                    std::cout << "\nLoading Data...\n";
                    readToyGraph("../Project2Graphs/Toy-Graphs/tourism.csv");
                    mainMenu();
                    break;
                case 0:
                    startMenu();
                    break;
                default:
                    std::cout << "ERROR: Invalid option\n";
                    std::cout << "(Press any key to continue)";
                    std::cin >> aux;
                    startMenu();
                    break;
            }
            break;
        case 3:
            clearScreen();
            std::cout << "\nLoading Data...\n";
            readFullyConGraph("../Project2Graphs/Extra_Fully_Connected_Graphs/edges_300.csv");
            mainMenu();
            break;
        case 4:
            readRealWorldGraph("../Project2Graphs/Real-World-Graphs/graph2/nodes.csv","../Project2Graphs/Real-World-Graphs/graph2/edges.csv");
            for (int i = 0; i < path.size() - 1; i++) {
                auto a= graph.getDist(path[i], path[i + 1]);
                if(a==-1) {std::cout << "ERROR: Invalid path\n";break;}
                distance += a;
            }
            std::cout << "Distance: " << distance << "\n";
            break;
        case 0:
            std::cout << "Exit\n";
            break;
        default:
            std::cout << "ERROR: Invalid option\n";
            break;
    }
}

void Controller::mainMenu() {
    clearScreen();

    std::cout << "\t**Traveling Salesperson Problem**\n\n";
    std::cout << "How would you like to calculate the best solution to the TSP in the graph you selected?\n";
    std::cout << "1. Backtracking\n";
    std::cout << "2. Triangular Approximation Heuristic\n";
    std::cout << "3. Other Heuristic\n";
    std::cout << "4. Change Graph\n";
    std::cout << "0. Exit\n";
    std::cout << "Option: ";

    int option;
    std::string aux;
    std::cin >> option;

    switch (option) {
        case 1:
            clearScreen();
            std::cout << "Calculating best solution using Backtracking...\n";
            backtracking();
            break;
        case 2:
            clearScreen();
            std::cout << "Calculating best solution using a Triangular Approximation Heuristic...\n";
            triangular();
            break;
        case 3:
            clearScreen();
            std::cout << "Calculating best solution using God's Algorithm...\n";
            godsAlgorithm();
            break;
        case 4:
            dataReset();
            startMenu();
            break;
        case 0:
            break;
        default:
            std::cout << "ERROR: Invalid option\n";
            std::cout << "(Press any key to continue)";
            std::cin >> aux;
            mainMenu();
            break;
    }

}

void Controller::backtrackingAux(Vertex* &current, std::vector<Vertex*>& path, double& distance, double& bestDistance, std::vector<Vertex*>& bestPath) {
    if(distance >= bestDistance) return;

    (*current).setVisited(true);
    path.push_back(current);

    if (path.size() == graph.getVertexSet().size()) {
        for(const auto& edge : current->getAdj()){
            if (edge.getDest() == graph.getVertexSet()[0]) {
                distance += edge.getWeight();
                path.push_back(graph.getVertexSet()[0]);

                if(distance < bestDistance - std::numeric_limits<float>::epsilon()){
                    bestDistance = distance;
                    bestPath = path;
                    std::cout << path[1]->getId() << " " << bestDistance << std::endl;
                }

                distance -= edge.getWeight();
                path.pop_back();
                break;
            }
        }
        path.pop_back();
        current->setVisited(false);
        return;
    }

    std::priority_queue<Edge, std::vector<Edge>, EdgeComparator> pq(current -> getAdj().begin(), current -> getAdj().end());
    while(!pq.empty()){
        auto edge = pq.top();
        pq.pop();

        Vertex* dest = edge.getDest();
        double weight = edge.getWeight();

        if(distance+weight >= bestDistance) break;

        if (!dest->isVisited()) {
            distance += weight;
            dest->setVisited(true);
            backtrackingAux(dest, path, distance, bestDistance, bestPath);
            dest->setVisited(false);
            distance -= weight;
        }
    }

    path.pop_back();
    current->setVisited(false);
}

void Controller::backtracking() {
    clock_t start = clock();
    std::vector<Vertex*> path, bestPath;
    double distance = 0, bestDistance = std::numeric_limits<double>::max();

    for (const auto& vertex : graph.getVertexSet()) {
        vertex->setVisited(false);
    }

    backtrackingAux(const_cast<Vertex *&>(graph.getVertexSet()[0]), path, distance, bestDistance, bestPath);

    clock_t end = clock();
    clearScreen();
    std::cout << "\t**Traveling Salesperson Problem**\n\n";

    if(bestPath.size() != (graph.getVertexSet().size()+1)){
        std::cout << "No path found!\n";
        std::cout << "Time: " << (double)(end-start)/CLOCKS_PER_SEC << " seconds\n";
        std::cout << "(Press any key to continue)\n";
        std::string aux;
        std::cin >> aux;
        mainMenu();
    }
    std::cout << "Best Path: ";
    std::cout << bestPath[0]->getId();

    for (int i = 1; i < bestPath.size(); ++i) {
        std::cout << " -> " << bestPath[i]->getId();
    }

    std::cout << "\nBest Distance: " << bestDistance << "\n";
    std::cout << "Time: " << (double)(end-start)/CLOCKS_PER_SEC << " seconds\n";
    std::cout << "(Press any key to continue)\n";
    std::string aux;
    std::cin >> aux;
    mainMenu();
}

double Controller::calculateDistance(std::vector<Vertex*> &path) {
    double distance=0;
    for(int i = 0; i < path.size()-1; i++){
        double w = graph.getDist(path[i]->getId(),path[i+1]->getId());
        if(w == -1){
            if(!graph.hasCoords) return -1;
            else {
                w = graph.calculateDist(path[i]->getLatitude(),path[i]->getLongitude(),path[i+1]->getLatitude(),path[i+1]->getLongitude());
            }
        }
        distance += w;
        std::cout << w << std::endl;
    }
    return distance;
}

void Controller::preorder(std::vector<Vertex*>& path, Vertex*& current) {
    path.push_back(current);
    current->setVisited(true);

    for(auto v: current->sons){
        if(!v->isVisited()){
            preorder(path, v);
        }
    }
}

void Controller::primMST() {
    auto current = graph.getVertexSet()[0];
    current->setDist(0);
    current->setVisited(true);
    std::priority_queue<Edge, std::vector<Edge>, EdgeComparator> pq(current -> getAdj().begin(), current -> getAdj().end());

    while(!pq.empty()){
        auto edge = pq.top();
        pq.pop();
        Vertex* dest = edge.getDest();

        if (!dest->isVisited()) {
            dest->setVisited(true);
            current->sons.push_back(dest);
            
            current = dest;

            if(graph.hasCoords) {
                for (const auto &node2: vertices) {
                    auto n = node2.second;
                    if (!n->isVisited()) {
                        Edge e = Edge(current, n, graph.getDist(current, n));
                        pq.push(e);
                    }
                }
            }
            else{
                for(const auto& e: current->getAdj()){
                    if(!e.getDest()->isVisited()){
                        pq.push(e);
                    }
                }
            }
        }
    }
}

void Controller::triangular() {
    clock_t start = clock();
    std::vector<Vertex *> path;

    for (const auto& vertex : graph.getVertexSet()) {
        vertex->setVisited(false);
    }

    primMST();

    for (const auto& vertex : graph.getVertexSet()) {
        vertex->setVisited(false);
    }

    preorder(path, const_cast<Vertex *&>(graph.getVertexSet()[0]));
    path.push_back(graph.getVertexSet()[0]);
    clock_t end = clock();
    clearScreen();

    if(path.size() == 1){
        std::cout << "No path found!\n";
        std::cout << "Time: " << (double)(end-start)/CLOCKS_PER_SEC << " seconds\n";
        std::cout << "(Press any key to continue)\n";
        std::string aux;
        std::cin >> aux;
        mainMenu();
    }

    std::cout << "\t**Traveling Salesperson Problem**\n\n";
    std::cout << "Best Path: ";
    std::cout << path[0]->getId();

    for (int i = 1; i < path.size(); ++i) {
        std::cout << " -> " << path[i]->getId();
    }
    std::cout << "Path size: " << path.size() << "\n";
    std::cout << "\nBest Distance: " << calculateDistance(path) << "\n";
    std::cout << "Time: " << (double)(end-start)/CLOCKS_PER_SEC << " seconds\n";
    std::cout << "(Press any key to continue)\n";
    std::string aux;
    std::cin >> aux;
    mainMenu();
}


void Controller::nearestNeighborGreedy(std::vector<Vertex*> &path, double &distance) {
    Vertex* current = graph.getVertexSet()[0];
    current->setVisited(true);
    path.push_back(current);

    while(path.size() < graph.getVertexSet().size()){
        std::priority_queue<Edge, std::vector<Edge>, EdgeComparator> pq(current -> getAdj().begin(), current -> getAdj().end());
        while(!pq.empty()){
            auto edge = pq.top();
            pq.pop();

            Vertex* dest = edge.getDest();
            double weight = edge.getWeight();

            if (!dest->isVisited()) {
                distance += weight;
                dest->setVisited(true);
                path.push_back(dest);
                current = dest;
                break;
            }
        }
    }
    path.push_back(graph.getVertexSet()[0]);
    distance += graph.getDist(path[path.size()-2]->getId(),path[path.size()-1]->getId());
}

void Controller::godsAlgorithm() {
    clearScreen();
    std::cout << "\t**Traveling Salesperson Problem**\n\n";
    clock_t start = clock();
    std::vector<Vertex*> path;
    for (const auto& vertex : graph.getVertexSet()) {
        vertex->setVisited(false);
    }
    double distance = 0;
    nearestNeighborGreedy(path, distance);
    std::cout << "Path Size: " << path.size() << "\n";
    std::cout << "Greedy: " << distance << "\n";
    std::cout << "Time: " << (double)(clock()-start)/CLOCKS_PER_SEC << " seconds\n";
    linKernighan(path, distance);
    clock_t start1 = clock();
    std::cout << "Path Size: " << path.size() << "\n";
    std::cout << "Lin-Kernighan: " << distance << "\n";
    std::cout << "Time: " << (double)(clock()-start1)/CLOCKS_PER_SEC << " seconds\n";
    std::cout << "(Press any key to continue)\n";
    std::string aux;
    std::cin >> aux;
    mainMenu();
}

void Controller::linKernighan(std::vector<Vertex*> &path, double &distance) {
    std::vector<Vertex*> bestPath;
    double bestDistance = 0;
    for (int i = 0; i < path.size()-1; ++i) {
        bestPath.push_back(path[i]);
        bestDistance += graph.getDist(path[i]->getId(),path[i+1]->getId());
    }
    bestPath.push_back(path[path.size()-1]);
    bestDistance += graph.getDist(path[path.size()-1]->getId(),path[0]->getId());
    bool improved = true;
    while(improved){
        improved = false;
        for (int i = 0; i < bestPath.size()-1; ++i) {
            for (int j = i+1; j < bestPath.size()-1; ++j) {
                std::vector<Vertex*> newPath;
                double newDistance = 0;
                for (int k = 0; k < i; ++k) {
                    newPath.push_back(bestPath[k]);
                    newDistance += graph.getDist(bestPath[k]->getId(),bestPath[k+1]->getId());
                }
                newPath.push_back(bestPath[j]);
                newDistance += graph.getDist(bestPath[j]->getId(),bestPath[j+1]->getId());
                for (int k = i+1; k < j; ++k) {
                    newPath.push_back(bestPath[k]);
                    newDistance += graph.getDist(bestPath[k]->getId(),bestPath[k+1]->getId());
                }
                newPath.push_back(bestPath[i]);
                newDistance += graph.getDist(bestPath[i]->getId(),bestPath[i+1]->getId());
                for (int k = j+1; k < bestPath.size()-1; ++k) {
                    newPath.push_back(bestPath[k]);
                    newDistance += graph.getDist(bestPath[k]->getId(),bestPath[k+1]->getId());
                }
                newPath.push_back(bestPath[0]);
                newDistance += graph.getDist(bestPath[bestPath.size()-1]->getId(),bestPath[0]->getId());
                if(newDistance < bestDistance){
                    std::cout << "Improved from: " << bestDistance << " to: " << newDistance << "\n";
                    std::cout << "Difference: " << bestDistance - newDistance << "\n";
                    if (newDistance / bestDistance < 0.95) {
                        improved = true;
                    }
                    else{
                        improved = false;
                    }
                    bestPath = newPath;
                    bestDistance = newDistance;

                }
            }
        }
    }
    path = bestPath;
    distance = bestDistance;
}

